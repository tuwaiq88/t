import { type NextAuthOptions, getServerSession } from "next-auth"
import CredentialsProvider from "next-auth/providers/credentials"
import { userModel } from "@/lib/models/user"

export const authOptions: NextAuthOptions = {
  session: {
    strategy: "jwt",
  },
  providers: [
    CredentialsProvider({
      async authorize(credentials) {
        // التحقق من وجود اسم المستخدم وكلمة المرور
        if (!credentials?.username || !credentials?.password) {
          throw new Error("Missing username or password")
        }

        // التحقق من صحة بيانات الاعتماد
        const user = await userModel.validateCredentials(credentials.username, credentials.password)

        if (!user) {
          throw new Error("Invalid username or password")
        }

        // إرجاع معلومات المستخدم
        return {
          id: user.id,
          name: user.fullName,
          email: user.email,
          role: user.role,
        }
      },
    }),
  ],
  callbacks: {
    jwt: async ({ token, user }) => {
      // إضافة معلومات المستخدم إلى الرمز المميز إذا كان المستخدم موجودًا
      if (user) {
        token.id = user.id
        token.role = user.role
      }
      return token
    },
    session: ({ session, token }) => {
      // تحديث الجلسة بمعلومات المستخدم
      return {
        ...session,
        user: {
          id: token.id,
          name: token.name,
          email: token.email,
          role: token.role,
        },
      }
    },
  },
  pages: {
    signIn: "/login", // صفحة تسجيل الدخول المخصصة
  },
}

// دالة للحصول على جلسة المصادقة
export const getAuthSession = () => getServerSession(authOptions)
